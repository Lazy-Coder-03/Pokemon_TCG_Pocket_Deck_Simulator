{"version":3,"sources":["../node_modules/@dzeio/object-util/dist/ObjectUtil.mjs","../node_modules/@cachex/core/dist/index.mjs","../node_modules/@cachex/memory/dist/index.mjs","../node_modules/@cachex/web-storage/dist/index.mjs","../src/models/Model.ts","../src/endpoints/Endpoint.ts","../src/endpoints/SimpleEndpoint.ts","../src/models/CardResume.ts","../src/models/Card.ts","../src/models/SerieResume.ts","../src/models/SetResume.ts","../src/models/Serie.ts","../src/models/Set.ts","../src/models/StringEndpoint.ts","../src/utils.ts","../src/version.js","../src/tcgdex.ts","../src/tcgdex.browser.ts"],"sourcesContent":["// src/ObjectUtil.ts\nfunction objectMap(obj, fn) {\n  mustBeObject(obj);\n  const list = [];\n  objectLoop(obj, (item, key, index) => {\n    list.push(fn(item, key, index));\n  });\n  return list;\n}\nfunction objectRemap(obj, fn, options) {\n  mustBeObject(obj);\n  const clone = {};\n  objectLoop(obj, (item, oldKey, index) => {\n    const { key, value } = fn(item, oldKey, index);\n    if ((options == null ? void 0 : options.strict) && key in clone) {\n      throw new Error(\"objectRemap strict mode active, you can't remap the same key twice\");\n    }\n    clone[key] = value;\n  });\n  return clone;\n}\nfunction objectLoop(obj, fn) {\n  mustBeObject(obj);\n  const keys = objectKeys(obj);\n  for (let index = 0; index < keys.length; index++) {\n    const key = keys[index];\n    const stop = fn(obj[key], key, index);\n    if (stop === false) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction objectValues(obj) {\n  mustBeObject(obj);\n  return Object.values(obj);\n}\nfunction objectToArray(obj) {\n  mustBeObject(obj);\n  return objectValues(obj);\n}\nfunction objectKeys(obj) {\n  mustBeObject(obj);\n  if (Array.isArray(obj)) {\n    return Array.from(obj.keys());\n  }\n  return Object.keys(obj);\n}\nfunction objectSize(obj) {\n  return objectKeys(obj).length;\n}\nfunction objectSort(obj, fn) {\n  mustBeObject(obj);\n  const ordered = {};\n  let sortedKeys = [];\n  if (Array.isArray(fn)) {\n    sortedKeys = fn.concat(objectKeys(obj).filter((key) => !fn.includes(key)));\n  } else {\n    sortedKeys = objectKeys(obj).sort(fn);\n  }\n  for (const key of sortedKeys) {\n    ordered[key] = obj[key];\n  }\n  return ordered;\n}\nfunction cloneObject(obj) {\n  return objectClone(obj);\n}\nfunction objectClone(obj, options) {\n  mustBeObject(obj);\n  if (Array.isArray(obj)) {\n    const arr = [];\n    for (const item of obj) {\n      arr.push(\n        isObject(item) ? objectClone(item) : item\n      );\n    }\n    return arr;\n  }\n  const clone = {};\n  objectLoop(obj, (value, key) => {\n    if (typeof value === \"object\" && value != null && (typeof (options == null ? void 0 : options.deep) === \"undefined\" || options.deep)) {\n      clone[key] = objectClone(value);\n      return;\n    }\n    clone[key] = value;\n  });\n  return clone;\n}\nfunction objectSet(obj, path, value) {\n  mustBeObject(obj);\n  let pointer = obj;\n  for (let index = 0; index < path.length; index++) {\n    const key = path[index];\n    const nextIndex = index + 1;\n    if (!Object.prototype.hasOwnProperty.call(pointer, key) && nextIndex < path.length) {\n      const key1 = path[nextIndex];\n      if (typeof key1 === \"number\") {\n        pointer[key] = [];\n      } else {\n        pointer[key] = {};\n      }\n    }\n    if (nextIndex === path.length) {\n      pointer[key] = value;\n      if (value === void 0) {\n        delete pointer[key];\n      }\n      break;\n    }\n    pointer = pointer[key];\n  }\n}\nfunction objectEqual(first, second) {\n  mustBeObject(first);\n  mustBeObject(second);\n  if (objectSize(first) !== objectSize(second)) {\n    return false;\n  }\n  const res = objectLoop(first, (item, key) => {\n    if (!(key in second) && key in first) {\n      return false;\n    }\n    const item2 = second[key];\n    if (item === null && item2 === null) {\n      return true;\n    }\n    if (typeof item === \"object\" && typeof item2 === \"object\") {\n      return objectEqual(item, item2);\n    }\n    return item === item2;\n  });\n  return res;\n}\nfunction objectClean(obj, options) {\n  mustBeObject(obj);\n  objectLoop(obj, (item, key) => {\n    if ((typeof (options == null ? void 0 : options.cleanUndefined) === \"undefined\" || options.cleanUndefined) && item === void 0) {\n      delete obj[key];\n    } else if ((options == null ? void 0 : options.cleanFalsy) && !obj[key]) {\n      delete obj[key];\n    } else if ((options == null ? void 0 : options.cleanNull) && item === null) {\n      delete obj[key];\n    }\n    if ((typeof (options == null ? void 0 : options.deep) === \"undefined\" || options.deep) && isObject(item)) {\n      objectClean(item, options);\n    }\n  });\n}\nfunction objectOmit(obj, ...keys) {\n  const cloned = objectClone(obj, { deep: false });\n  for (const key of keys) {\n    if (key in cloned) {\n      delete cloned[key];\n    }\n  }\n  return cloned;\n}\nfunction objectFind(obj, fn) {\n  mustBeObject(obj);\n  let res = void 0;\n  objectLoop(obj, (value, key, index) => {\n    const tmp = fn(value, key, index);\n    if (tmp) {\n      res = {\n        key,\n        value,\n        index\n      };\n    }\n    return !tmp;\n  });\n  return res;\n}\nfunction objectGet(obj, path) {\n  if (!path || path === \"\" || Array.isArray(path) && path.length === 0) {\n    return obj;\n  }\n  mustBeObject(obj);\n  if (typeof path === \"string\") {\n    path = path.split(\".\").map((it) => /^\\d+$/g.test(it) ? Number.parseInt(it) : it);\n  }\n  let pointer = obj;\n  for (let index = 0; index < path.length; index++) {\n    const key = path[index];\n    const nextIndex = index + 1;\n    if (typeof key === \"undefined\" || !Object.prototype.hasOwnProperty.call(pointer, key) && nextIndex < path.length) {\n      return void 0;\n    }\n    if (nextIndex === path.length) {\n      return pointer[key];\n    }\n    pointer = pointer[key];\n  }\n  throw new Error(`it should never get there ! (${JSON.stringify(obj)}, ${path}, ${JSON.stringify(pointer)})`);\n}\nfunction isObject(item) {\n  return typeof item === \"object\" && item !== null;\n}\nfunction mustBeObject(item) {\n  if (!isObject(item)) {\n    throw new Error(\"Input is not an object!\");\n  }\n  return true;\n}\nvar ObjectUtil_default = {\n  objectClean,\n  objectClone,\n  objectEqual,\n  objectFind,\n  objectGet,\n  objectKeys,\n  objectLoop,\n  objectMap,\n  objectOmit,\n  objectRemap,\n  objectSet,\n  objectSize,\n  objectSort,\n  // helpers\n  isObject,\n  mustBeObject,\n  // deprecated\n  objectToArray,\n  cloneObject\n};\nexport {\n  cloneObject,\n  ObjectUtil_default as default,\n  isObject,\n  mustBeObject,\n  objectClean,\n  objectClone,\n  objectEqual,\n  objectFind,\n  objectGet,\n  objectKeys,\n  objectLoop,\n  objectMap,\n  objectOmit,\n  objectRemap,\n  objectSet,\n  objectSize,\n  objectSort,\n  objectToArray,\n  objectValues\n};\n","// src/CacheAbstract.ts\nimport { objectLoop } from \"@dzeio/object-util\";\nvar CacheAsbract = class {\n  getMultiple(keys, defaultValues) {\n    const res = {};\n    for (let idx = 0; idx < keys.length; idx++) {\n      const key = keys[idx];\n      const value = this.get(key, defaultValues == null ? void 0 : defaultValues[idx]);\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      res[key] = value;\n    }\n    return res;\n  }\n  setMultiple(values, ttl) {\n    objectLoop(values, (v, k) => {\n      this.set(k, v, ttl);\n    });\n    return true;\n  }\n  deleteMultiple(keys) {\n    for (const key of keys) {\n      this.delete(key);\n    }\n    return true;\n  }\n};\nexport {\n  CacheAsbract\n};\n/*!\n * Library based on the awesome PHP Psr 16 SimpleCache\n *\n * CacheX is a simple, easy to use and meant to be replaceable Cache library for most usage\n */\n","// src/index.ts\nimport { CacheAsbract } from \"@cachex/core\";\nvar MemoryCache = class extends CacheAsbract {\n  constructor() {\n    super(...arguments);\n    this.cache = /* @__PURE__ */ new Map();\n  }\n  get(key, defaultValue) {\n    const item = this.cache.get(key);\n    if (!item) {\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    if (item.expire && item.expire < (/* @__PURE__ */ new Date()).getTime()) {\n      this.delete(key);\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    return item.data;\n  }\n  set(key, value, ttl) {\n    let expire;\n    if (ttl) {\n      expire = (/* @__PURE__ */ new Date()).getTime() + ttl * 1e3;\n    }\n    this.cache.set(key, {\n      data: value,\n      expire\n    });\n    return true;\n  }\n  delete(key) {\n    this.cache.delete(key);\n    return true;\n  }\n  clear() {\n    this.cache.clear();\n    return true;\n  }\n  has(key) {\n    return this.cache.has(key);\n  }\n};\nexport {\n  MemoryCache as default\n};\n","// src/index.ts\nimport { CacheAsbract } from \"@cachex/core\";\nvar BrowserStorageCache = class extends CacheAsbract {\n  constructor(prefix, session = false) {\n    super();\n    this.prefix = prefix;\n    try {\n      window;\n    } catch {\n      throw new Error('The current context is not in a browser or the variable \"window\" is not available.');\n    }\n    if (session) {\n      this.storage = window.sessionStorage;\n    } else {\n      this.storage = window.localStorage;\n    }\n    if (!this.storage) {\n      throw new Error(\"window.localStorage or window.sessionStorage are unavailable.\");\n    }\n  }\n  get(key, defaultValue) {\n    const raw = this.storage.getItem(this.getFinalKey(key));\n    if (!raw) {\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    const item = JSON.parse(raw);\n    if (item.expire && item.expire < (/* @__PURE__ */ new Date()).getTime()) {\n      this.delete(key);\n      return defaultValue != null ? defaultValue : void 0;\n    }\n    return item.data;\n  }\n  set(key, value, ttl) {\n    let expire = void 0;\n    if (ttl) {\n      expire = (/* @__PURE__ */ new Date()).getTime() + ttl * 1e3;\n    }\n    const data = {\n      data: value,\n      expire\n    };\n    this.storage.setItem(this.getFinalKey(key), JSON.stringify(data));\n    return true;\n  }\n  delete(key) {\n    this.storage.removeItem(this.getFinalKey(key));\n    return true;\n  }\n  clear() {\n    const keys = this.keys();\n    return this.deleteMultiple(keys);\n  }\n  has(key) {\n    return !!this.storage.getItem(this.getFinalKey(key));\n  }\n  /**\n  * get the list of keys that are in the context of this cache component\n  */\n  keys() {\n    const list = [];\n    for (let idx = 0; idx < this.storage.length; idx++) {\n      const key = this.storage.key(idx);\n      if (typeof key !== \"string\" || this.prefix && !(key == null ? void 0 : key.startsWith(`@${this.prefix}/`))) {\n        continue;\n      }\n      list.push(key);\n    }\n    return list;\n  }\n  /**\n  * retrieve the prefixed key from the original\n  * @param key the original key without prefix\n  * @returns the new key with the prefix if set\n  */\n  getFinalKey(key) {\n    if (!this.prefix) {\n      return key;\n    }\n    return `@${this.prefix}/${key}`;\n  }\n};\nexport {\n  BrowserStorageCache as default\n};\n","import { objectLoop } from '@dzeio/object-util'\nimport type TCGdex from '../tcgdex'\n\nexport default abstract class Model {\n\n\tpublic constructor(\n\t\tprotected readonly sdk: TCGdex\n\t) { }\n\n\t/**\n\t * build a model depending on the data given\n\t * @param model the model to build\n\t * @param data the data to fill it with\n\t */\n\tpublic static build<T extends Model>(model: T, data?: object): T {\n\t\tif (!data) {\n\t\t\tthrow new Error('data is necessary.')\n\t\t}\n\t\tmodel.fill(data)\n\t\treturn model\n\t}\n\n\tprotected fill(obj: object) {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\t(this as object)[key] = value\n\t\t})\n\t}\n}\n","import type { Endpoints } from '../interfaces'\nimport Model from '../models/Model'\nimport type Query from '../Query'\nimport type TCGdex from '../tcgdex'\n\nexport default class Endpoint<Item extends Model, List extends Model> {\n\tpublic constructor(\n\t\tprotected readonly tcgdex: TCGdex,\n\t\tprotected readonly itemModel: new (sdk: TCGdex) => Item,\n\t\tprotected readonly listModel: new (sdk: TCGdex) => List,\n\t\tprotected readonly endpoint: Endpoints\n\t) { }\n\n\tpublic async get(id: string | number): Promise<Item | null> {\n\t\tconst res = await this.tcgdex.fetch(this.endpoint as 'cards', id as string)\n\t\tif (!res) {\n\t\t\treturn null\n\t\t}\n\t\treturn Model.build(new this.itemModel(this.tcgdex), res)\n\t}\n\n\tpublic async list(query?: Query): Promise<Array<List>> {\n\t\tconst res = await this.tcgdex.fetchWithQuery([this.endpoint], query?.params)\n\t\treturn (res as Array<object> ?? []).map((it) => Model.build(new this.listModel(this.tcgdex), it))\n\t}\n}\n","import type { Endpoints } from '../interfaces'\nimport Model from '../models/Model'\nimport type Query from '../Query'\nimport type TCGdex from '../tcgdex'\n\nexport default class SimpleEndpoint<Item extends Model, List extends string | number> {\n\tpublic constructor(\n\t\tprotected readonly tcgdex: TCGdex,\n\t\tprotected readonly itemModel: new (sdk: TCGdex) => Item,\n\t\tprotected readonly endpoint: Endpoints\n\t) {}\n\n\tpublic async get(id: string | number): Promise<Item | null> {\n\t\tconst res = await this.tcgdex.fetch(this.endpoint as 'cards', id as string)\n\t\tif (!res) {\n\t\t\treturn null\n\t\t}\n\t\treturn Model.build(new this.itemModel(this.tcgdex), res)\n\t}\n\n\tpublic async list(query?: Query): Promise<Array<List>> {\n\t\treturn await this.tcgdex.fetchWithQuery([this.endpoint], query?.params) ?? []\n\t}\n}\n","import type { Extension, Quality } from '../interfaces'\nimport type Card from './Card'\nimport Model from './Model'\n\nexport default class CardResume extends Model {\n\t/**\n\t * Globally unique card ID based on the set ID and the cards ID within the set\n\t */\n\tpublic id!: string\n\n\t/**\n\t * Card image url without the extension and quality\n\t *\n\t * @see {@link getImageURL}\n\t */\n\tpublic image?: string\n\n\t/**\n\t * ID indexing this card within its set, usually just its number\n\t */\n\tpublic localId!: string\n\n\t/**\n\t * Card Name (Including the suffix if next to card name)\n\t */\n\tpublic name!: string\n\n\t/**\n\t * the the Card Image full URL\n\t *\n\t * @param {Quality} quality the quality you want your image to be in\n\t * @param {Extension} extension extension you want you image to be\n\t * @return the full card URL\n\t */\n\tpublic getImageURL(quality: Quality = 'high', extension: Extension = 'png'): string {\n\t\treturn `${this.image}/${quality}.${extension}`\n\t}\n\n\t/**\n\t * Get the full Card\n\t *\n\t * @return the full card if available\n\t */\n\tpublic async getCard(): Promise<Card> {\n\t\treturn (await this.sdk.card.get(this.id))!\n\t}\n}\n","import CardResume from './CardResume'\nimport type { Booster, Variants } from './Other'\nimport type TCGdexSet from './Set'\nimport type SetResume from './SetResume'\n\n// TODO: sort elements by alphabetical order\nexport default class Card extends CardResume {\n\t/**\n\t * Card illustrator\n\t */\n\tpublic illustrator?: string\n\n\t/**\n\t * Card Rarity\n\t *\n\t * - None https://www.tcgdex.net/database/sm/smp/SM01\n\t * - Common https://www.tcgdex.net/database/xy/xy9/1\n\t * - Uncommon https://www.tcgdex.net/database/xy/xy9/2\n\t * - Rare https://www.tcgdex.net/database/xy/xy9/3\n\t * - Ultra Rare\n\t * - Secret Rare\n\t */\n\tpublic rarity!: string\n\n\t/**\n\t * Card Category\n\t *\n\t * - Pokemon\n\t * - Trainer\n\t * - Energy\n\t */\n\tpublic category!: string\n\n\t/**\n\t * Card Variants (Override Set Variants)\n\t */\n\tpublic variants?: Variants\n\n\t/**\n\t * Card Set\n\t */\n\tpublic set!: SetResume\n\n\t/**\n\t * Pokemon only elements\n\t */\n\n\t/**\n\t * Pokemon Pokedex ID\n\t */\n\tpublic dexId?: Array<number>\n\n\t/**\n\t * Pokemon HP\n\t */\n\tpublic hp?: number\n\n\t/**\n\t * Pokemon Types\n\t * ex for multiple https://www.tcgdex.net/database/ex/ex13/17\n\t */\n\tpublic types?: Array<string>\n\n\t/**\n\t * Pokemon Sub Evolution\n\t */\n\tpublic evolveFrom?: string\n\n\t/**\n\t * Pokemon Weight\n\t */\n\tpublic weight?: string\n\n\t/**\n\t * Pokemon Description\n\t */\n\tpublic description?: string\n\n\t/**\n\t * Level of the Pokemon\n\t *\n\t * NOTE: can be equal to 'X' when the pokemon is a LEVEL-UP one\n\t */\n\tpublic level?: number | string\n\n\t/**\n\t * Pokemon Stage\n\t *\n\t * - Basic https://www.tcgdex.net/database/xy/xy9/1\n\t * - BREAK https://www.tcgdex.net/database/xy/xy9/18\n\t * - LEVEL-UP https://www.tcgdex.net/database/dp/dp1/121\n\t * - MEGA https://www.tcgdex.net/database/xy/xy1/2\n\t * - RESTORED https://www.tcgdex.net/database/bw/bw5/53\n\t * - Stage1 https://www.tcgdex.net/database/xy/xy9/2\n\t * - Stage2 https://www.tcgdex.net/database/xy/xy9/3\n\t * - VMAX https://www.tcgdex.net/database/swsh/swsh1/50\n\t */\n\tpublic stage?: string\n\n\t/**\n\t * Card Suffix\n\t *\n\t * - EX https://www.tcgdex.net/database/ex/ex2/94\n\t * - GX https://www.tcgdex.net/database/sm/sm12/4\n\t * - V https://www.tcgdex.net/database/swsh/swsh1/1\n\t * - Legend https://www.tcgdex.net/database/hgss/hgss1/114\n\t * - Prime https://www.tcgdex.net/database/hgss/hgss2/85\n\t * - SP https://www.tcgdex.net/database/pl/pl1/7\n\t * - TAG TEAM-GX https://www.tcgdex.net/database/sm/sm12/226\n\t */\n\tpublic suffix?: string\n\n\t/**\n\t * Pokemon Held Item\n\t *\n\t * ex https://www.tcgdex.net/database/dp/dp2/75\n\t */\n\tpublic item?: {\n\t\tname: string\n\t\teffect: string\n\t}\n\n\t/**\n\t * Pokemon Abilities\n\t *\n\t * multi abilities ex https://www.tcgdex.net/database/ex/ex15/10\n\t */\n\tpublic abilities?: Array<{\n\t\ttype: string\n\t\tname: string\n\t\teffect: string\n\t}>\n\n\t/**\n\t * Pokemon Attacks\n\t */\n\tpublic attacks?: Array<{\n\t\tcost?: Array<string>\n\t\tname: string\n\t\teffect?: string\n\t\tdamage?: string | number\n\t}>\n\n\t/**\n\t * Pokemon Weaknesses\n\t */\n\tpublic weaknesses?: Array<{\n\t\ttype: string\n\t\tvalue?: string\n\t}>\n\n\tpublic resistances?: Array<{\n\t\ttype: string\n\t\tvalue?: string\n\t}>\n\n\tpublic retreat?: number\n\n\t// Trainer/Energy\n\tpublic effect?: string\n\n\t// Trainer Only\n\tpublic trainerType?: string\n\n\t// Energy Only\n\tpublic energyType?: string\n\n\t/**\n\t * Define the rotation mark on cards >= Sword & Shield\n\t */\n\tpublic regulationMark?: string\n\n\t/**\n\t * Card ability to be played in official tournaments\n\t *\n\t * Note: all cards are avaialable to play in unlimited tournaments\n\t */\n\tpublic legal!: {\n\n\t\t/**\n\t\t * Ability to play in standard tournaments\n\t\t */\n\t\tstandard: boolean\n\n\t\t/**\n\t\t * Ability to play in expanded tournaments\n\t\t */\n\t\texpanded: boolean\n\t}\n\n\tpublic boosters?: Array<Booster>\n\n\tpublic override async getCard(): Promise<Card> {\n\t\treturn this\n\t}\n\n\tpublic async getSet(): Promise<TCGdexSet> {\n\t\treturn (await this.sdk.set.get(this.set.id))!\n\t}\n}\n","import type { Extension } from '../interfaces'\nimport Model from './Model'\nimport type Serie from './Serie'\n\nexport default class SerieResume extends Model {\n\tpublic id!: string\n\tpublic name!: string\n\tpublic logo?: string\n\n\t/**\n\t * the the Card Image full URL\n\t *\n\t * @param {Quality} quality the quality you want your image to be in\n\t * @param {Extension} extension extension you want you image to be\n\t * @return the full card URL\n\t */\n\tpublic getImageURL(extension: Extension = 'png'): string {\n\t\treturn `${this.logo}.${extension}`\n\t}\n\n\tpublic async getSerie(): Promise<Serie> {\n\t\treturn (await this.sdk.serie.get(this.id))!\n\t}\n}\n","import Model from './Model'\nimport type TCGdexSet from './Set'\n\nexport default class SetResume extends Model {\n\tpublic id!: string\n\tpublic name!: string\n\tpublic logo?: string\n\tpublic symbol?: string\n\tpublic cardCount!: {\n\n\t\t/**\n\t\t * total of number of cards\n\t\t */\n\t\ttotal: number\n\n\t\t/**\n\t\t  * number of cards officialy (on the bottom of each cards)\n\t\t  */\n\t\tofficial: number\n\t}\n\n\tpublic async getSet(): Promise<TCGdexSet> {\n\t\treturn (await this.sdk.set.get(this.id))!\n\t}\n}\n","import { objectLoop } from '@dzeio/object-util'\nimport Model from './Model'\nimport SerieResume from './SerieResume'\nimport SetResume from './SetResume'\n\nexport default class Serie extends SerieResume {\n\tpublic sets!: Array<SetResume>\n\n\tprotected fill(obj: object): void {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\tswitch (key) {\n\t\t\t\tcase 'sets':\n\t\t\t\t\tthis.sets = (value as Array<any>).map((it) => Model.build(new SetResume(this.sdk), it))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthis[key] = value\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\t}\n}\n","import { objectLoop } from '@dzeio/object-util'\nimport CardResume from './CardResume'\nimport Model from './Model'\nimport type { Booster, Variants } from './Other'\nimport type SerieResume from './SerieResume'\n\n// biome-ignore lint/suspicious/noShadowRestrictedNames: <explanation>\nexport default class Set extends Model {\n\tpublic id!: string\n\tpublic name!: string\n\tpublic logo?: string\n\tpublic symbol?: string\n\tpublic serie!: SerieResume\n\tpublic tcgOnline?: string\n\tpublic variants?: Variants\n\n\tpublic releaseDate!: string\n\n\t/**\n\t * Designate if the set is usable in tournaments\n\t *\n\t * Note: this is specific to the set and if a\n\t * card is banned from the set it will still be true\n\t */\n\tpublic legal!: {\n\n\t\t/**\n\t\t * Ability to play in standard tournaments\n\t\t */\n\t\tstandard: boolean\n\n\t\t/**\n\t\t * Ability to play in expanded tournaments\n\t\t */\n\t\texpanded: boolean\n\t}\n\n\tpublic cardCount!: {\n\n\t\t/**\n\t\t * total of number of cards\n\t\t */\n\t\ttotal: number\n\n\t\t/**\n\t\t * number of cards officialy (on the bottom of each cards)\n\t\t */\n\t\tofficial: number\n\n\t\t/**\n\t\t * number of cards having a normal version\n\t\t */\n\t\tnormal: number\n\n\t\t/**\n\t\t * number of cards having an reverse version\n\t\t */\n\t\treverse: number\n\n\t\t/**\n\t\t * number of cards having an holo version\n\t\t */\n\t\tholo: number\n\n\t\t/**\n\t\t * Number of possible cards\n\t\t */\n\t\tfirstEd?: number\n\t}\n\n\tpublic cards!: Array<CardResume>\n\n\tpublic boosters?: Array<Booster>\n\n\tpublic async getSerie() {\n\t\treturn this.sdk.serie.get(this.serie.id)\n\t}\n\n\tprotected fill(obj: object): void {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\tswitch (key) {\n\t\t\t\tcase 'cards':\n\t\t\t\t\tthis.cards = (value as Array<any>).map((it) => Model.build(new CardResume(this.sdk), it))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthis[key] = value\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\t}\n}\n","import { objectLoop } from '@dzeio/object-util'\nimport CardResume from './CardResume'\nimport Model from './Model'\n\nexport default class StringEndpoint extends Model {\n\tpublic name!: string\n\tpublic cards!: Array<CardResume>\n\n\tprotected fill(obj: object): void {\n\t\tobjectLoop(obj, (value, key) => {\n\t\t\tswitch (key) {\n\t\t\t\tcase 'cards':\n\t\t\t\t\tthis.cards = (value as Array<any>).map((it) => Model.build(new CardResume(this.sdk), it))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tthis[key] = value\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\t}\n}\n","import type { Endpoints } from './interfaces'\n\n/**\n * detect the current running context of the program\n */\nexport function detectContext(): 'browser' | 'server' {\n\ttry {\n\t\tconst isBrowser = !!window\n\t\treturn isBrowser ? 'browser' : 'server'\n\t} catch {\n\t\treturn 'server'\n\t}\n}\n\nexport const ENDPOINTS: ReadonlyArray<Endpoints> = [\n\t'cards', 'categories', 'dex-ids', 'energy-types',\n\t'hp', 'illustrators', 'rarities', 'regulation-marks',\n\t'retreats', 'series', 'sets', 'stages', 'suffixes',\n\t'trainer-types', 'types', 'variants', 'random'\n] as const\n","export const version = '2.7.1'","import type CacheInterface from '@cachex/core'\nimport MemoryCache from '@cachex/memory'\nimport LocalStorageCache from '@cachex/web-storage'\nimport Query from './Query'\nimport Endpoint from './endpoints/Endpoint'\nimport SimpleEndpoint from './endpoints/SimpleEndpoint'\nimport type {\n\tCard,\n\tCardResume,\n\tEndpoints,\n\tSerie,\n\tSerieList,\n\tSetList,\n\tStringEndpoint,\n\tSupportedLanguages,\n\tSet as TCGdexSet\n} from './interfaces'\nimport CardModel from './models/Card'\nimport CardResumeModel from './models/CardResume'\nimport Model from './models/Model'\nimport SerieModel from './models/Serie'\nimport SerieResume from './models/SerieResume'\nimport SetModel from './models/Set'\nimport SetResumeModel from './models/SetResume'\nimport StringEndpointModel from './models/StringEndpoint'\nimport { ENDPOINTS, detectContext } from './utils'\nimport { version } from './version'\n\nexport default class TCGdex {\n\n\t/**\n\t * How the remote data is going to be fetched\n\t */\n\tpublic static fetch: typeof fetch =\n\t\tdetectContext() === 'browser'\n\t\t\t// fixe: TypeError: 'fetch' called on an object that does not implement interface Window.\n\t\t\t? (...params: Parameters<typeof fetch>) => window.fetch(...params)\n\t\t\t: fetch\n\n\t/**\n\t * @deprecated to change the lang use {@link TCGdex.getLang} and {@link TCGdex.setLang}\n\t */\n\tpublic static defaultLang: SupportedLanguages = 'en'\n\n\t/**\n\t * the previously hidden caching system used by TCGdex to not kill the API\n\t */\n\tpublic cache: CacheInterface =\n\t\tdetectContext() === 'browser'\n\t\t\t? new LocalStorageCache('tcgdex-cache')\n\t\t\t: new MemoryCache()\n\n\t/**\n\t * the default cache TTL, only subsequent requests will have their ttl changed\n\t */\n\tpublic cacheTTL = 60 * 60\n\n\t// random card/set/serie endpoints\n\tpublic readonly random = {\n\t\tcard: async (): Promise<CardModel> => {\n\t\t\tconst res = await this.fetch('random', 'card')\n\t\t\treturn Model.build(new CardModel(this), res)\n\t\t},\n\t\tset: async (): Promise<SetModel> => {\n\t\t\tconst res = await this.fetch('random', 'set')\n\t\t\treturn Model.build(new SetModel(this), res)\n\t\t},\n\t\tserie: async (): Promise<SerieModel> => {\n\t\t\tconst res = await this.fetch('random', 'serie')\n\t\t\treturn Model.build(new SerieModel(this), res)\n\t\t}\n\t}\n\n\tpublic readonly card = new Endpoint(this, CardModel, CardResumeModel, 'cards')\n\tpublic readonly set = new Endpoint(this, SetModel, SetResumeModel, 'sets')\n\tpublic readonly serie = new Endpoint(this, SerieModel, SerieResume, 'series')\n\n\tpublic readonly type = new SimpleEndpoint(this, StringEndpointModel, 'types')\n\tpublic readonly retreat = new SimpleEndpoint(this, StringEndpointModel, 'retreats')\n\tpublic readonly rarity = new SimpleEndpoint(this, StringEndpointModel, 'rarities')\n\tpublic readonly illustrator = new SimpleEndpoint(this, StringEndpointModel, 'illustrators')\n\tpublic readonly hp = new SimpleEndpoint(this, StringEndpointModel, 'hp')\n\tpublic readonly categorie = new SimpleEndpoint(this, StringEndpointModel, 'categories')\n\tpublic readonly dexID = new SimpleEndpoint(this, StringEndpointModel, 'dex-ids')\n\tpublic readonly energyType = new SimpleEndpoint(this, StringEndpointModel, 'energy-types')\n\tpublic readonly regulationMark = new SimpleEndpoint(this, StringEndpointModel, 'regulation-marks')\n\tpublic readonly stage = new SimpleEndpoint(this, StringEndpointModel, 'stages')\n\tpublic readonly suffixe = new SimpleEndpoint(this, StringEndpointModel, 'suffixes')\n\tpublic readonly trainerType = new SimpleEndpoint(this, StringEndpointModel, 'trainer-types')\n\tpublic readonly variant = new SimpleEndpoint(this, StringEndpointModel, 'variants')\n\n\tprivate lang: SupportedLanguages = 'en'\n\tprivate endpointURL = 'https://api.tcgdex.net/v2'\n\n\tpublic constructor(lang: SupportedLanguages = 'en') {\n\t\tthis.setLang(lang)\n\t}\n\n\t/**\n\t * @deprecated use the constructor parameter or {@link TCGdex.setLang} when in an instance\n\t */\n\tpublic static setDefaultLang(lang: SupportedLanguages) {\n\t\tTCGdex.defaultLang = lang\n\t}\n\n\t/**\n\t * @deprecated use {@link TCGdex.setLang} when in an instance\n\t */\n\tpublic static getDefaultLang(): SupportedLanguages {\n\t\treturn TCGdex.defaultLang\n\t}\n\n\t/**\n\t * the endpoint URL\n\t * ex: `https://api.tcgdex.net/v2`\n\t * @param endpoint the url\n\t */\n\tpublic setEndpoint(endpoint: string) {\n\t\tthis.endpointURL = endpoint\n\t}\n\tpublic getEndpoint(): string {\n\t\treturn this.endpointURL\n\t}\n\n\t/**\n\t * set the current cache methodology\n\t * @param cache the cache to use\n\t */\n\tpublic setCache(cache: CacheInterface) {\n\t\tthis.cache = cache\n\t}\n\n\t/**\n\t * get the current cache methodology\n\t * @param cache the cache to use\n\t */\n\tpublic getCache(): CacheInterface {\n\t\treturn this.cache\n\t}\n\n\t/**\n\t * the endpoint URL\n\t * ex: `https://api.tcgdex.net/v2`\n\t * @param endpoint the url\n\t */\n\tpublic setCacheTTL(seconds: number) {\n\t\tthis.cacheTTL = seconds\n\t}\n\t/**\n\t * get the current useed cache ttl in seconds\n\t * @returns the cache ttl in seconds\n\t */\n\tpublic getCacheTTL(): number {\n\t\treturn this.cacheTTL\n\t}\n\n\tpublic getLang(): SupportedLanguages {\n\t\treturn this.lang ?? TCGdex.defaultLang ?? 'en'\n\t}\n\n\tpublic setLang(lang: SupportedLanguages) {\n\t\tthis.lang = lang\n\t}\n\n\t/**\n\t * Shortcut to easily fetch a card using both it's global id and it's local ID\n\t * @param id the card global/local ID\n\t * @param set the card set name/ID (optionnal)\n\t * @returns the card object\n\t */\n\tpublic async fetchCard(id: string | number, set?: string): Promise<Card | undefined> {\n\t\tconst path = set ? ['sets', set] : ['cards']\n\t\t// @ts-expect-error the base endpoint is 'sets' or 'cards'\n\t\treturn this.fetch(...path, id)\n\t}\n\n\t/**\n\t * Shortcut to easily fetch cards using an optionnal set name/ID\n\t * @param set the card set name/ID (optionnal)\n\t * @returns a card list\n\t */\n\tpublic async fetchCards(set?: string): Promise<Array<CardResume> | undefined> {\n\t\tif (set) {\n\t\t\tconst fSet = await this.fetch('sets', set)\n\t\t\treturn fSet ? fSet.cards : undefined\n\t\t}\n\t\treturn this.fetch('cards')\n\t}\n\n\t/**\n\t * @deprecated use `this.fetch('sets', set)`\n\t */\n\tpublic async fetchSet(set: string): Promise<TCGdexSet | undefined> {\n\t\treturn this.fetch('sets', set)\n\t}\n\n\t/**\n\t * @deprecated use `this.fetch('series', serie)`\n\t */\n\tpublic async fetchSerie(serie: string): Promise<Serie | undefined> {\n\t\treturn this.fetch('series', serie)\n\t}\n\n\t/**\n\t * @deprecated use `this.fetch('series')`\n\t */\n\tpublic async fetchSeries(): Promise<SerieList | undefined> {\n\t\treturn this.fetch('series')\n\t}\n\n\t/**\n\t * Shortcut to easily fetch sets using an optionnal serie name/ID\n\t * @param serie the card set name/ID (optionnal)\n\t * @returns a card list\n\t */\n\tpublic async fetchSets(serie?: string): Promise<SetList | undefined> {\n\t\tif (serie) {\n\t\t\tconst fSerie = await this.fetch('series', serie)\n\t\t\treturn fSerie ? fSerie.sets : undefined\n\t\t}\n\t\treturn this.fetch('sets')\n\t}\n\n\t/**\n\t * Fetch a card using its global id\n\t * @param endpoint_0 'cards'\n\t * @param endpoint_1 {string} the card global ID\n\t */\n\tpublic async fetch(...type: ['cards', string]): Promise<Card | undefined>\n\n\t/**\n\t * Fetch every cards in the database\n\t * @param endpoint_0 'cards'\n\t */\n\tpublic async fetch(type: 'cards'): Promise<Array<CardResume> | undefined>\n\n\t/**\n\t * Fetch a card using its local id and its set\n\t * @param endpoint_0 'sets'\n\t * @param endpoint_1 {string} the set name or ID\n\t * @param endpoint_2 {string} the card local ID\n\t */\n\tpublic async fetch(...endpoint: ['sets', string, string]): Promise<Card | undefined>\n\n\t/**\n\t * Fetch a set\n\t * @param endpoint_0 'sets'\n\t * @param endpoint_1 {string} the set name or ID\n\t */\n\tpublic async fetch(...endpoint: ['sets', string]): Promise<TCGdexSet | undefined>\n\n\t/**\n\t * Fetch a random element\n\t * @param endpoint_0 'random'\n\t * @param endpoint_1 {'set' | 'card' | 'serie'} the type of random element you want to get\n\t */\n\tpublic async fetch(...endpoint: ['random', 'set' | 'card' | 'serie']): Promise<Card | TCGdexSet | Serie | undefined>\n\n\t/**\n\t * Fetch every sets\n\t * @param endpoint_0 'sets'\n\t */\n\tpublic async fetch(endpoint: 'sets'): Promise<SetList | undefined>\n\n\t/**\n\t * Fetch a serie\n\t * @param endpoint_0 'series'\n\t * @param endpoint_1 {string} the serie name or ID\n\t */\n\tpublic async fetch(...endpoint: ['series', string]): Promise<Serie | undefined>\n\n\t/**\n\t * Fetch every series\n\t * @param endpoint_0 'series'\n\t */\n\tpublic async fetch(endpoint: 'series'): Promise<SerieList | undefined>\n\n\t/**\n\t * Fetch cards depending on a specific filter\n\t * @param endpoint_0 {'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'}\n\t * Possible value 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'\n\t * @param endpoint_1 {string} the value set while fetching the index\n\t */\n\tpublic async fetch(...endpoint: ['categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants', string]): Promise<StringEndpoint | undefined>\n\n\t/**\n\t * Fetch cards depending on a specific filter\n\t * @param endpoint_0 {'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'}\n\t * Possible value 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'\n\t * @param endpoint_1 {string} Fetch the possible values to use depending on the endpoint\n\t */\n\tpublic async fetch(endpoint: 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'): Promise<Array<string> | undefined>\n\n\t/**\n\t * Fetch The differents endpoints depending on the first argument\n\t * @param endpoint_0 {'hp' | 'retreats' | 'categories' | 'illustrators' | 'rarities' | 'types'}\n\t * Possible value 'cards' | 'categories' | 'hp' | 'illustrators' | 'rarities' | 'retreats' | 'series' | 'sets' | 'types'\n\t * @param endpoint_1 {string} (Optionnal) some details to go from the index file to the item file (mostly the ID/name)\n\t * @param endpoint_2 {string} (Optionnal) only for sets the card local ID to fetch the card through the set\n\t */\n\tpublic async fetch<T = object>(...endpoint: Array<Endpoints | string>): Promise<T | undefined> {\n\t\tif (endpoint.length === 0) {\n\t\t\tthrow new Error('endpoint to fetch is empty!')\n\t\t}\n\t\t// @ts-expect-error with the precedent check, we KNOW that type is not empty\n\t\tconst baseEndpoint = endpoint.shift().toLowerCase() as Endpoint\n\t\tif (!ENDPOINTS.includes(baseEndpoint)) {\n\t\t\tthrow new Error(`unknown endpoint to fetch! (${baseEndpoint})`)\n\t\t}\n\t\treturn this.actualFetch<T>(this.getFullURL([baseEndpoint, ...endpoint]))\n\t}\n\n\t/**\n\t * @param endpoint the endpoint to fetch\n\t * @param query the query\n\t */\n\tpublic async fetchWithQuery<T = object>(\n\t\tendpoint: [Endpoints, ...Array<string>],\n\t\tquery?: Array<{ key: string, value: string | number | boolean }>\n\t): Promise<T | undefined> {\n\t\tif (endpoint.length === 0) {\n\t\t\tthrow new Error('endpoint to fetch is empty!')\n\t\t}\n\t\tconst baseEndpoint = endpoint[0].toLowerCase() as Endpoints\n\t\tif (!ENDPOINTS.includes(baseEndpoint)) {\n\t\t\tthrow new Error(`unknown endpoint to fetch! (${baseEndpoint})`)\n\t\t}\n\t\treturn this.actualFetch<T>(this.getFullURL(endpoint, query))\n\t}\n\n\t/**\n\t * format the final URL\n\t */\n\tprivate getFullURL(\n\t\tpath: Array<string | number>,\n\t\tsearchParams?: Array<{ key: string, value: string | number | boolean }>\n\t): string {\n\t\t// build base path\n\t\tconst url = new URL(`${this.getEndpoint()}/${this.getLang()}`)\n\n\t\t// set url path\n\t\turl.pathname = `${url.pathname}/${path.join('/')}`\n\n\t\t// handle the Search Params\n\t\tfor (const param of searchParams ?? []) {\n\t\t\turl.searchParams.append(param.key, param.value.toString())\n\t\t}\n\n\t\t// return with the endpoint and all the shit\n\t\treturn url.toString()\n\t}\n\n\tprivate async actualFetch<T = object>(path: string): Promise<T | undefined> {\n\t\t// get and return the cached value if available\n\t\tconst cached = this.cache.get(path)\n\t\tif (cached) {\n\t\t\treturn cached as T\n\t\t}\n\n\t\t// the actual Fetch :D\n\t\tconst resp = await TCGdex.fetch(path, {\n\t\t\theaders: {\n\t\t\t\t'user-agent': `@tcgdex/javascript-sdk/${version}`\n\t\t\t}\n\t\t})\n\n\t\t// throw if a server-side error is occured\n\t\tif (resp.status >= 500) {\n\t\t\ttry {\n\t\t\t\tconst json = JSON.stringify(await resp.json())\n\t\t\t\tthrow new Error(json)\n\t\t\t} catch {\n\t\t\t\tthrow new Error('TCGdex Server responded with an invalid error :(')\n\t\t\t}\n\t\t}\n\n\t\t// response is not valid :O\n\t\tif (resp.status !== 200) {\n\t\t\treturn undefined\n\t\t}\n\n\t\t// parse, put to cache and return\n\t\tconst json = await resp.json()\n\n\t\tthis.cache.set(path, json, this.cacheTTL)\n\t\treturn json as T\n\t}\n}\n\n// export the old interfaces\nexport type * from './interfaces.d.ts'\n\n// export the new models items and the Query\nexport {\n\tCardModel, CardResumeModel, Endpoint, Model, Query, SerieModel,\n\tSerieResume as SerieResumeModel,\n\tSetModel,\n\tSetResumeModel, SimpleEndpoint\n}\n","import TCGdex from \"./tcgdex\"\n\nmodule.exports = TCGdex\n"],"mappings":"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","names":["init_dist","init_dist","init_dist","json"]}